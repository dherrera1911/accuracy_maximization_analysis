import numpy as np
import torch
from torch import optim
from torch import fft as fft
import torch.nn.functional as F
import matplotlib.pyplot as plt
from matplotlib import patches, colors, cm
from ama_library import quadratic_moments as qm
import time

##################################
##################################
#
## FUNCTIONS FOR FITTING AMA MODELS
#
##################################
##################################
#
# This group of functions take an ama model, and some inputs
# such as the loss function, and do the training loop.
# Different types of training are available, such as training
# the filters in pairs, or with multiple seeds


# Define loop function to train the model
def fit(nEpochs, model, trainDataLoader, lossFun, opt, sAll,
        ctgInd, sAmp=None, scheduler=None, addStimNoise=True,
        addRespNoise=True, sTst=None, ctgIndTst=None):
    """
    Fit AMA model using the posterior distribuions generated by the model.
    ----------------
    Arguments:
    ----------------
      - nEpochs: Number of epochs. Integer.
      - model: AMA model object.
      - trainDataLoader: Data loader generated with torch.utils.data.DataLoader.
      - lossFun: Loss function that uses posterior distribution over classes.
      - opt: Optimizer, selected from torch.optim.
      - sAll: Full stimulus matrix, used for updating model statistics.
              For Isotropic AMA, it is raw stimuli. For Empirical AMA it is
              noisy normalized stimulus. (nStim x nDim)
      - ctgInd: Vector indicating category of each stimulus row. Used for
              updating statistics (nStim)
      - scheduler: Scheduler for adaptive learning rate, generated with
              optim.lr_scheduler. Default is None.
      - addStimNoise: Boolean indicating whether to add stimulus noise during
              training. Default is True.
      - addRespNoise: Boolean indicating whether to add response noise during
              training. Default is True.
      - sTst: Test stimulus matrix, used for computing test
              loss. (nStim x nDim). Default is None.
      - ctgIndTst: Vector indicating category of each test stimulus row.
              Used for computing test loss. (nStim). Default is None.
    ----------------
    Outputs:
    ----------------
      - trainingLoss: Vector of training loss at each epoch. (nEpochs)
      - elapsedTime: Vector of elapsed time at each epoch. (nEpochs)
    """
#    # If narrowband, precompute amplitude spectrum for more speed
#    if model.filtNorm == 'narrowband':
#        sAmp = model.compute_normalized_stimulus_amplitude_spec(s=sAll,
#                sameAsInit=True)
#    else:
#        sAmp = None
    trainingLoss = np.zeros(nEpochs+1)
    tstLoss = np.zeros(nEpochs+1)
    elapsedTime = np.zeros(nEpochs+1)
    # Get the loss of the full dataset stored in the data loader
    trainingLoss[0] = lossFun(model=model,
                              s=trainDataLoader.dataset.tensors[0],
                              ctgInd=trainDataLoader.dataset.tensors[1]).detach()
    if not sTst == None:
        tstLoss[0] = lossFun(model=model, s=sTst, ctgInd=ctgIndTst)
    print(f"Init Train loss: {trainingLoss[0]:.4f}  | "
          f"Test loss: {tstLoss[0]:.4f}")
    opt.zero_grad()
    # TAKE THE TIME AND START LOOP
    start = time.time()
    print("-"*72)
    print(f"{'Epoch':^5} | {'Train loss':^12} | {'Diff (e-3)':^10} | "
          f"{'Test loss':^12} | {'Diff (e-3)':^10} | {'Time (s)':^8}")
    print("-"*72)
    for epoch in range(nEpochs):
        ### MAIN TRAINING LOOP
        for sb, ctgb in trainDataLoader:
            # Update model statistics to the new filters
            model.update_response_statistics(sAll=sAll, ctgInd=ctgInd, sAmp=None)
            loss = lossFun(model, sb, ctgb)     # Compute loss
            loss.backward()                     # Compute gradient
            opt.step()                          # Take one step
            opt.zero_grad()                     # Restart gradient
            # One Cycle LR adapts at each batch
            if type(scheduler) == optim.lr_scheduler.OneCycleLR:
                scheduler.step()                # Adapt learning rate
        ### PRINT MODEL LOSS
        trainingLoss[epoch+1] = lossFun(
            model=model,
            s=trainDataLoader.dataset.tensors[0],
            ctgInd=trainDataLoader.dataset.tensors[1]).detach()
        trainingDiff = trainingLoss[epoch+1] - trainingLoss[epoch]
        if not sTst == None:
            tstLoss[epoch+1] = lossFun(model=model, s=sTst, ctgInd=ctgIndTst)
        tstDiff = tstLoss[epoch+1] - tstLoss[epoch]
        # Print headers
        print(f"{epoch+1:^5} | "
              f"{trainingLoss[epoch]:>12.3f} | "
              f"{trainingDiff*1000:>10.1f} | "
              f"{tstLoss[epoch]:>12.3f} | "
              f"{tstDiff*1000:>10.1f} | "
              f"{elapsedTime[epoch]:^8.1f}")
        end = time.time()
        elapsedTime[epoch+1] = end - start
        # Apply scheduler step
        if type(scheduler) == optim.lr_scheduler.ReduceLROnPlateau:
            scheduler.step(trainingLoss[epoch+1])    # adapt learning rate
        elif type(scheduler) == optim.lr_scheduler.StepLR:
            scheduler.step()
    print("")
    # DO THE FINAL RESPONSE STATISTICS UPDATE
    model.update_response_statistics(sAll=sAll, ctgInd=ctgInd, sAmp=None)
    return trainingLoss, tstLoss, elapsedTime


# LOOP TO TRAIN MULTIPLE SEEDS AND CHOOSE BEST
def fit_multiple_seeds(nEpochs, model, trainDataLoader, lossFun, opt_fun,
        sAll, ctgInd, sAmp=None, nSeeds=1, scheduler_fun=None, addStimNoise=True,
        addRespNoise=True, sTst=None, ctgIndTst=None):
    """
    Fit AMA model multiple times from different seeds, and keep the result with
    best performance.
    ----------------
    Arguments:
    ----------------
      - nEpochs: Number of epochs for each pair of filters. Integer.
      - model: AMA model object.
      - trainDataLoader: Data loader generated with torch.utils.data.DataLoader.
      - lossFun: Loss function that uses posterior distribution over classes.
      - opt_fun: A function that takes in a model and returns an optimizer.
      - sAll: Full stimulus matrix, used for computing pairwise
              correlations. (nStim x nDim)
      - ctgInd: Vector indicating category of each stimulus row. (nStim)
      - sAmp: Precomputed amplitude spectrum. Used for speed when the model
              filter normalization is set to "narrowband". (nStim x nDim).
              Optional argument, sAmp is coputed in the function if set to None.
      - nSeeds: Number of times to train the filters among which to choose
              the best ones. Default is 1.
      - scheduler_fun: Function that takes in an optimizer and returns
              a scheduler for that optimizer. Default is None.
      - addStimNoise: Boolean indicating whether to add stimulus noise during
              training. Default is True.
      - addRespNoise: Boolean indicating whether to add response noise during
              training. Default is True.
      - sTst: Test stimulus matrix, used for computing test
              loss. (nStim x nDim). Default is None.
      - ctgIndTst: Vector indicating category of each test stimulus row.
              Used for computing test loss. (nStim). Default is None.
    ----------------
    Outputs:
    ----------------
      - trainingLoss: Numpy array with training loss for each seed, with rows
              sorted in increasing order of final loss (nSeeds x nEpochs).
      - tstLoss: Numpy array with test loss for each seed, with rows
              sorted in increasing order of final loss (nSeeds x nEpochs).
      - elapsedTime: Numpy array with elapsed time for each seed, with
              rows sorted in increasing order of final loss (nSeeds x nEpochs).
      - filters: List of filters for each seed, sorted in increasing
              order of final loss (nSeeds x nDim).
    """
    # If narrowband, precompute amplitude spectrum for more speed
#    if model.filtNorm == 'narrowband':
#        sAmp = model.compute_normalized_stimulus_amplitude_spec(s=sAll,
#                sameAsInit=True)
#    else:
#        sAmp = None
    # INITIALIZE LISTS TO FILL WITH TRAINING PROGRESS INFORMATION
    seedLoss = np.zeros(nSeeds)
    trainingLoss = np.zeros((nSeeds, nEpochs+1))
    tstLoss = np.zeros((nSeeds, nEpochs+1))
    elapsedTimes = np.zeros((nSeeds, nEpochs+1))
    filters = [None] * nSeeds
    # LOOP OVER SEEDS
    for p in range(nSeeds):
        print(f'##########      SEED {p+1}      ########## \n ')
        # If not first seed, reinitialize the model
        if (p>0):
            model.reinitialize_trainable(sAll=sAll, ctgInd=ctgInd, sAmp=None)
        # Set up optimizer and scheduler
        opt = opt_fun(model)
        if (scheduler_fun == None):
            scheduler = None
        else:
            scheduler = scheduler_fun(opt)
        # TRAIN MODEL WITH THIS SEED
        tlSeed, vlSeed, etSeed = fit(
            nEpochs=nEpochs, model=model, trainDataLoader=trainDataLoader,
            lossFun=lossFun, opt=opt, sAll=sAll, ctgInd=ctgInd,
            scheduler=scheduler, addStimNoise=addStimNoise,
            addRespNoise=addRespNoise, sTst=sTst, ctgIndTst=ctgIndTst)
        # Save training loss, test loss and elapsed time
        trainingLoss[p,:] = tlSeed
        tstLoss[p,:] = vlSeed
        elapsedTimes[p,:] = etSeed
        filters[p] = model.f.detach().clone()
        # Get the final loss of the filters of this seeds loss.
        # If test data is used, used test loss, otherwise
        # use training loss
        if not sTst is None:
            seedLoss[p] = tstLoss[p,-1]
        else:
            seedLoss[p] = trainingLoss[p,-1]
    # SET THE FILTER WITH THE MINIMUM LOSS INTO THE MODEL
    minFilt = seedLoss.argmin()
    model.assign_filter_values(fNew=filters[minFilt],
                               sAll=sAll, ctgInd=ctgInd, sAmp=None)
    # SORT THE TRAINING LOSS, ELAPSED TIME VECTORS AND LEARNED FILTERS
    # LIST BY INCREASING FINAL LOSS
    trainingLoss = trainingLoss[seedLoss.argsort(),:]
    tstLoss = tstLoss[seedLoss.argsort(),:]
    elapsedTimes = elapsedTimes[seedLoss.argsort(),:]
    filters = [filters[i] for i in seedLoss.argsort()]
    return trainingLoss, tstLoss, elapsedTimes, filters


# TRAIN MODEL FILTERS IN PAIRS, WITH POSSIBLE SEED SELECTION
def fit_by_pairs(nEpochs, model, trainDataLoader, lossFun, opt_fun,
        nPairs, sAll, ctgInd, scheduler_fun=None, seedsByPair=1,
        addStimNoise=True, addRespNoise=True, sTst=None, ctgIndTst=None):
    """
    Fit AMA model training filters by pairs. After a pair is trained, it
    is fixed in place (no longer trainable), and a new set of trainable
    filters is then initialized and trained. Has the option to try different
    seeds for each pair of filters trained, and choosing the best pair
    ----------------
    Arguments:
    ----------------
      - nEpochs: Number of epochs for each pair of filters. Integer.
      - model: AMA model object.
      - trainDataLoader: Data loader generated with torch.utils.data.DataLoader.
      - lossFun: Loss function that uses posterior distribution over classes.
      - opt_fun: A function that takes in a model and returns an optimizer.
      - nPairs: Number of pairs to train. nPairs=1 corresponds to only training
          the filters included in the input model.
      - sAll: Full stimulus matrix, used for computing pairwise
              correlations. (nStim x nDim)
      - ctgInd: Vector indicating category of each stimulus row. (nStim)
      - seedsByPair: Number of times to train each pair from different random
          initializations, to choose the best pair. Default is 1.
      - scheduler_fun: Function that takes in an optimizer and returns
              a scheduler for that optimizer. Default is None.
      - addStimNoise: Boolean indicating whether to add stimulus noise during
              training. Default is True.
      - addRespNoise: Boolean indicating whether to add response noise during
              training. Default is True.
      - sTst: Test stimulus matrix, used for computing test
              loss. (nStim x nDim). Default is None.
      - ctgIndTst: Vector indicating category of each test stimulus row.
              Used for computing test loss. (nStim). Default is None.
    ----------------
    Outputs:
    ----------------
      - trainingLoss: List with training loss for each pair of filters trained.
              list of length nPairs, each element is a tensor with size
              (seedsByPair x nEpochs)
      - tstLoss: List with test loss for each pair of filters trained.
              list of length nPairs, each element is a tensor with size
              (seedsByPair x nEpochs)
      - elapsedTimes: List with elapsed times for each pair of filters trained.
              list of length nPairs, each element is a tensor with size
              (seedsByPair x nEpochs)
      - filters: List of different seed filters for each pair trained.
              list of length nPairs, where each element is a list of length
              seedByPair, containing a tensor with the filters trained at
              that step, of size (2 x nDim)
    """
#    if model.filtNorm == 'narrowband':
#        sAmp = model.compute_normalized_stimulus_amplitude_spec(s=sAll,
#                sameAsInit=True)
#    else:
#        sAmp = None
    trainingLoss = [None] * nPairs
    tstLoss = [None] * nPairs
    elapsedTimes = [None] * nPairs
    filters = [None] * nPairs
    # Measure time and start loop
    start = time.time()
    for p in range(nPairs):
        # If not the first iteration, fix current filters and add new trainable
        if (p>0):
            model.move_trainable_2_fixed(sAll=sAll, ctgInd=ctgInd, sAmp=None)
        print("#"*45)
        print(f'##########      FILTER PAIR {p+1}      ##########')
        print("#"*45, "\n ")
        # Train the current pair of trainable filters
        trainingLoss[p], tstLoss[p], elapsedTimes[p], filters[p] = \
                fit_multiple_seeds(
                    nEpochs=nEpochs,model=model, trainDataLoader=trainDataLoader,
                    lossFun=lossFun, opt_fun=opt_fun, sAll=sAll, ctgInd=ctgInd,
                    nSeeds=seedsByPair, scheduler_fun=scheduler_fun,
                    addStimNoise=addStimNoise, addRespNoise=addRespNoise,
                    sTst=sTst, ctgIndTst=ctgIndTst)
        end = time.time()
        elapsedTime = end - start
        minutes, seconds = divmod(int(elapsedTime), 60)
        print(f'########## PAIR {p+1} TRAINED IN {minutes:02d}:{seconds:02d} '
              '########## \n ')
    # Put all the filters into the f model attribute
    fAll = model.fixed_and_trainable_filters().detach().clone()
    model.assign_filter_values(fNew=fAll, sAll=sAll, ctgInd=ctgInd,
            sAmp=None)
    model.add_fixed_filters(fFixed=torch.tensor([]), sAll=sAll,
            ctgInd=ctgInd, sAmp=None)
    return trainingLoss, tstLoss, elapsedTimes, filters


##################################
##################################
#
## LOSS FUNCTIONS
#
##################################
##################################
#
# Define loss functions that take as input AMA model, so
# different outputs can be used with the same fitting functions


def cross_entropy_loss():
    """
    Cross entropy loss for AMA.
    ----------------
    Outputs:
    ----------------
      - lossFun: Function that takes in a model, stimuli, and category indices,
          and returns the cross entropy loss.
    """
    def lossFun(model, s, ctgInd):
        """
        ----------------
        Arguments:
        ----------------
          - model: AMA model object
          - s: input stimuli. tensor shaped batch x features
          - ctgInd: true categories of stimuli, as a vector with category index
            type torch.LongTensor
        ----------------
        Outputs:
        ----------------
          - loss: Cross entropy loss
        """
        posteriors = model.get_posteriors(s, addStimNoise=F)
        nStim = s.shape[0]
        loss = -torch.mean(posteriors[torch.arange(nStim), ctgInd])
        return loss
    return lossFun


def kl_loss():
    """
    ----------------
    Outputs:
    ----------------
      - lossFun: Function that takes in a model, stimuli, and category indices,
          and returns the negative LL loss.
    """
    def lossFun(model, s, ctgInd):
        """
        ----------------
        Arguments:
        ----------------
          - model: AMA model object
          - s: input stimuli. tensor shaped batch x features
          - ctgInd: true categories of stimuli, as a vector with category index
        ----------------
        Outputs:
        ----------------
          - loss: Negative LL loss
        """
        logProbs = F.log_softmax(model.get_log_likelihood(s), dim=1)
        nStim = s.shape[0]
        loss = -torch.mean(logProbs[torch.arange(nStim), ctgInd])
        return loss
    return lossFun


def mse_loss():
    """
    ----------------
    Outputs:
    ----------------
      - lossFun: Function that takes in a model, stimuli, and category indices,
          and returns the negative mean square error loss.
    """
    mseLoss = torch.nn.MSELoss()
    def lossFun(model, s, ctgInd):
        """
        ----------------
        Arguments:
        ----------------
          - model: AMA model object
          - s: input stimuli. tensor shaped batch x features
          - ctgInd: true categories of stimuli, as a vector with category index
        ----------------
        Outputs:
        ----------------
          - loss: MSE loss
        """
        loss = mseLoss(model.get_estimates(s, method4est='MMSE'),
                model.ctgVal[ctgInd])
        return loss
    return lossFun


def mae_loss():
    """
    ----------------
    Outputs:
    ----------------
      - lossFun: Function that takes in a model, stimuli, and category indices,
          and returns the negative mean absolute error loss.
    """
    mseLoss = torch.nn.L1Loss()
    def lossFun(model, s, ctgInd):
        """
        ----------------
        Arguments:
        ----------------
          - model: AMA model object
          - s: input stimuli. tensor shaped batch x features
          - ctgInd: true categories of stimuli, as a vector with category index
        ----------------
        Outputs:
        ----------------
          - loss: MAE loss
        """
        loss = mseLoss(model.get_estimates(s, method4est='MMSE'),
                model.ctgVal[ctgInd])
        return loss
    return lossFun


##################################
##################################
#
## STIMULUS PROCESSING
#
##################################
##################################


def smp_pos(samplesPerUnit, nSamples, startAtZero=False):
    """
    Returns an array with an equally spaced sample across a given
    dimension. E.g. returns an array with the spatial position value
    of each pixel.
    ----------------
    Arguments:
    ----------------
      - samplesPerUnit: How many samples to take per 1 unit of the dimension
      - nSamples: Total number of samples to take
    ----------------
    Outputs:
    ----------------
      - posUnt: Array with the position of each sample. numpy arrayw
          of size nSamples.
    """
    if nSamples % 2 == 0:
        posMinUnt = -0.5 * nSamples / samplesPerUnit
        posMaxUnt = 0.5 * nSamples / samplesPerUnit - 1/samplesPerUnit
    else:
        posMinUnt = -0.5 * (nSamples-1) / samplesPerUnit
        posMaxUnt = 0.5 * (nSamples-1) / samplesPerUnit
    posUnt = np.linspace(posMinUnt, posMaxUnt, np.max(nSamples));
    if startAtZero:
       posUnt = posUnt-posMinUnt; 
    return posUnt


def cos_window_XYT(patchSizeXYT, diskDiamXYT=np.array([0,0,0])):
    """
    Make a cosine window with a flat top to apply to a stimulus.
    If one dimension is not needed (e.g. images without time), set its size
    to 1. The window will have a diameter equal to the patch size.
    ----------------
    Arguments:
    ----------------
      - patchSizeXYT: Size of patch to apply window to. The resulting
          window will have the same dimensions.
      - diskDiamXYT: Size of flat part of window (i.e. disk full of 1's).
         By default is set to 0, and no flat window is used.
    ----------------
    Outputs:
    ----------------
      - W: 3D window, where rows correspond to Y dimension, columns to
          X dimension, and channel to T dimension.
    """
    if type(patchSizeXYT) is list:
        patchSizeXYT = np.array(patchSizeXYT)
    rampDiamXYT = patchSizeXYT - diskDiamXYT
    Wdim = []
    for dim in range(3):
        dimNumPix = patchSizeXYT[dim]
        # Make flat-top disk in X
        R = smp_pos(1, dimNumPix)
        if R.size % 2 == 0:
            R = R + np.diff(R[0:2])/2
        # Convert diameter to radius
        diskRadiusPix = diskDiamXYT[dim] / 2
        rampRadiusPix = rampDiamXYT[dim] / 2
        freqcpp = 1 / (2 * rampRadiusPix)
        # Make  ramp
        Wtemp = np.ones((dimNumPix, 1))
        mask = np.abs(R) > diskRadiusPix
        Wtemp[mask,0] = 0.5 * (1 + np.cos(2 * np.pi * freqcpp * (np.abs(R[mask]) -
            diskRadiusPix)))
        Wtemp[np.abs(R) > (diskRadiusPix + rampRadiusPix)] = 0
        Wdim.append(Wtemp.squeeze())
    W = np.einsum('x,y,t->yxt', Wdim[0], Wdim[1], Wdim[2])
    return W


def contrast_stim(s, nChannels=1):
    """Take a batch of stimuli and convert to Weber contrast stimulus
    That is, subtracts the stimulus mean, and then divides by the mean.
    ----------------
    Arguments:
    ----------------
      - s: Stimuli batch. (nStim x nDimensions)
      - nChannels: Channels into which to separate the stimulus to make each
          channel into contrast individually.
    ----------------
    Outputs:
    ----------------
      - sContrast: Contrast stimulus. (nStim x nDimensions)
    """
    s_split = torch.chunk(s, nChannels, dim=1)
    s_contrast_split = []
    for s_part in s_split:
        sMean = torch.mean(s_part, axis=1)
        sContrast = torch.einsum('nd,n->nd', (s_part - sMean.unsqueeze(1)), 1/sMean)
        s_contrast_split.append(sContrast)
    sContrast = torch.cat(s_contrast_split, dim=1)
    return sContrast


def noise_total_2_noise_pix(sigmaEqv, numPix):
    """ Calculate the level of noise (i.e. standar deviation) to implement
    decision-variable noise with standard deviation given by sigmaEqv.
    ----------------
    Arguments:
    ----------------
      - sigmaEqv: Standard deviation of decision variable
      - numPix: Number of pixels in the stimulus
    ----------------
    Outputs:
    ----------------
      - sigmaPix: Standard deviation of pixel-level noise
    """
    sigmaPix = sigmaEqv * np.sqrt(numPix)
    return sigmaPix


def normalize_stimuli_channels(s, nChannels=1):
    """ Normalize the stimuli in s to unit norm. Normalize the
    stimuli separating it into nChannels. Each channel is assumed to
    be in contiguous columns of s (that is, s is split into nChannels
    chunks to normalize).
    ----------------
    Arguments:
    ----------------
      - s: Stimuli to normalize. (nStim x nDim)
      - nChannels: Number of channels into which to divide stimuli.
    ----------------
    Outputs:
    ----------------
      - sNormalized: Normalized stimuli. (nStim x nDim)
    """
    n, d = s.shape
    # Reshape s to have an extra dimension for the groups
    sReshaped = s.view(n, nChannels, -1)
    # Calculate the norms for each group separately
    group_norms = torch.norm(sReshaped, dim=2, keepdim=True)
    # Normalize the groups separately
    sNormalized = sReshaped / group_norms
    # Compute the overall normalization factor
    normFactor = torch.sqrt(torch.tensor(nChannels))
    # Multiply each row by the normalization factor to make the whole row have unit length
    sNormalized = (sNormalized.view(n, -1) / normFactor).view(n, d)
    return sNormalized


def category_means(s, ctgInd):
    """ Compute the mean of the stimuli for each category
    ----------------
    Arguments:
    ----------------
      - s: Stimuli. (nStim x nDim)
      - ctgInd: Category index for each stimulus. (nStim x 1)
    ----------------
    Outputs:
    ----------------
      - stimMean: Mean of the stimuli for each category. (nCtg x nDim)
    """
    nDim = int(s.shape[1])
    # Compute the mean of the stimuli for each category
    device = s.device
    nClasses = torch.unique(ctgInd).size()[0]
    stimMean = torch.zeros(nClasses, nDim, device=device)
    for cl in range(nClasses):
        mask = (ctgInd == cl)
        sClass = s[mask]
        stimMean[cl,:] = torch.mean(sClass, dim=0)
    return stimMean


def category_secondM(s, ctgInd):
    """ Compute the second moment of the stimuli for each category
    ----------------
    Arguments:
    ----------------
      - s: Stimuli. (nStim x nDim)
      - ctgInd: Category index for each stimulus. (nStim x 1)
    ----------------
    Outputs:
    ----------------
      - stimSM: Second moment of the stimuli for each category. (nCtg x nDim x nDim)
    """
    nDim = int(s.shape[1])
    # Compute the second moment of the stimuli for each category
    nClasses = torch.unique(ctgInd).size()[0]
    device = s.device
    stimSM = torch.zeros(nClasses, nDim, nDim, device=device)
    for cl in range(nClasses):
        mask = (ctgInd == cl)
        sClass = s[mask]
        nStimLevel = sClass.size(0)
        stimSM[cl,:,:] = torch.einsum('nd,nb->db', sClass, sClass) / nStimLevel
    return stimSM


def compute_amplitude_spectrum(s):
    """Compute the amplitude spectrum of a stimulus. Shifted
    to have lower amplitudes in the middle. Also divides by the square
    root of the number of dimension
    ----------------
    Arguments:
    ----------------
      - s: Stimuli. (nStim x nDim)
    ----------------
    Outputs:
    ----------------
      - sAmp: Amplitude spectrum of the stimuli. (nStim x nDim)
    """
    # Get amplitude spectrum
    sAmp = torch.abs(fft.fftshift(fft.fft(s, dim=1, norm='ortho'), dim=1))
    return sAmp


def interpolate_category_values(ctgVal, nPoints):
    """ Interpolate the values of the latent variable for each category
    to have nPoints values between each pair of values.
    ----------------
    Arguments:
    ----------------
      - ctgVal: Values of the latent variable for each category. (nCtg x 1)
      - nPoints: Number of points to interpolate between each pair of values
    ----------------
    Outputs:
    ----------------
      - ctgValInterp: Interpolated values of the latent variable for each
        category. (nCtg x 1)
    """
    nVals = len(ctgVal) - 1
    interpList = []
    for n in range(nVals):
        interp = np.linspace(ctgVal[n], ctgVal[n+1], num=nPoints+2)
        interpList.append(interp[:-1])
    ctgValInterp = np.concatenate(interpList)
    ctgValInterp = np.append(ctgValInterp, ctgVal[-1])
    return ctgValInterp
    


##################################
##################################
#
## SUMMARIZE MODEL RESULTS
#
##################################
##################################
#
#

# Function that turns posteriors into estimate averages, SDs and CIs
def get_estimate_statistics(estimates, ctgInd, quantiles=[0.16, 0.84]):
    """ Compute the mean, standard deviation and confidence intervals
    of the estimates for each level of the latent variable.
    ----------------
    Arguments:
    ----------------
      - estimates: Estimates of the latent variable for each stimulus.
        (nStim x 1)
      - ctgInd: Category index for each stimulus. (nStim x 1)
      - quantiles: Quantiles to use for the confidence intervals.
    ----------------
    Outputs:
    ----------------
      - statsDict: Dictionary with the mean, standard deviation and
        confidence intervals for each level of the latent variable.
    """
    # Compute means and stds for each true level of the latent variable
    estimatesMeans = torch.zeros(ctgInd.max()+1)
    estimatesMedians = torch.zeros(ctgInd.max()+1)
    estimatesSD = torch.zeros(ctgInd.max()+1)
    lowCI = torch.zeros(ctgInd.max()+1)
    highCI = torch.zeros(ctgInd.max()+1)
    quantiles = torch.tensor(quantiles)
    for cl in ctgInd.unique():
        mask = (ctgInd == cl)
        estLevel = estimates[mask]  # Stimuli of the same category
        estimatesMeans[cl] = estLevel.mean()
        estimatesMedians[cl] = torch.median(estLevel)
        estimatesSD[cl] = estLevel.std()
        (lowCI[cl], highCI[cl]) = torch.quantile(estLevel, quantiles)
    statsDict = {'estimateMean': estimatesMeans,
                 'estimateMedian': estimatesMedians,
                 'estimateSD': estimatesSD,
                 'lowCI': lowCI, 'highCI': highCI}
    return statsDict


def subsample_covariance(covariance, classInd, filtInd):
    """ Takes a tensor of shape k x d x d holding the covariance
    matrices for k classes and d filters, and returns a smaller
    tensor with the covariances matrices of the classes given in
    classInd, and of the filters in filtInd.
    Eg. if classInd=[2, 3, 4] and filtInd=[0,3], it returns the
    covariance matrix between filters 0 and 3, for classes 2,3,4.
    ----------------
    Arguments:
    ----------------
      - covariance: Covariance matrices for each class and filter.
      - classInd: Indices of the classes to keep.
      - filtInd: Indices of the filters to keep.
    ----------------
    Outputs:
    ----------------
      - covPlt: Covariance matrices for the selected classes and filters.
    """
    covPlt = covariance[classInd, :, :]
    covPlt = covPlt[:, filtInd, :]
    covPlt = covPlt[:, :, filtInd]
    return covPlt


def subsample_categories(nCtg, subsampleFactor):
    """
    Subsample the number of categories, while keeping the middle category.
    ----------------
    Arguments:
    ----------------
        - nCtg: Number of categories
        - subsampleFactor: Factor by which the categories will be subsampled
    ----------------
    Outputs:
    ----------------
        - subsampledInds: Vector containing the indices of the subsampled categories.
            These are equispaced with one another, and keep the middle category.
    """
    # Generate original vector
    allInds = np.arange(nCtg)
    # Ensure nCtg is odd
    assert len(allInds) % 2 == 1, "nCtg must be odd."
    # Find middle index
    midIdx = len(allInds) // 2
    # Calculate the start index for the left and right subsample
    start_left = midIdx % subsampleFactor
    start_right = midIdx + subsampleFactor
    # Subsample vector, maintaining the middle element
    subsampledInds = np.concatenate((allInds[start_left:midIdx:subsampleFactor], 
                                 allInds[midIdx:midIdx+1], 
                                 allInds[start_right::subsampleFactor]))
    return subsampledInds



##################################
##################################
#
## UTILITY FUNCTIONS
#
##################################
##################################
#
#

def unpack_matlab_data(matlabData, ctgIndName='ctgInd', ctgValName='ctgVal'):
    """ Unpack the data from the matlab file into the appropriate
    format for the model.
    ----------------
    Arguments:
    ----------------
      - matlabData: Dictionary containing the data from the matlab file.
      - ctgIndName: Name of the field containing the category indices.
      - ctgValName: Name of the field containing the category values.
    ----------------
    Outputs:
    ----------------
      - s: Disparity stimuli. (nStim x nFilters)
      - ctgInd: Category index for each stimulus. (nStim x 1)
      - ctgVal: Values of the latent variable for each category. (nCtg x 1)
    """
    # Extract disparity stimuli
    if 's' in matlabData.keys():
      s = matlabData.get("s")
    else:
      s = matlabData.get("Iret")
    s = torch.from_numpy(s)
    s = s.transpose(0, 1)
    s = s.float()
    # Extract the vector indicating category of each stimulus row
    ctgInd = matlabData.get(ctgIndName)
    ctgInd = torch.tensor(ctgInd)
    ctgInd = ctgInd.flatten()
    ctgInd = ctgInd-1       # convert to python indexing (subtract 1)
    ctgInd = ctgInd.type(torch.LongTensor)  # convert to torch integer
    # Extract the values of the latent variable
    ctgVal = matlabData.get(ctgValName)
    ctgVal = torch.from_numpy(ctgVal)
    ctgVal = ctgVal.float()
#    ctgVal = ctgVal.flatten().float()
    return (s, ctgInd, ctgVal)


def sort_categories(ctgVal, ctgInd):
    """ Sort the categories by their values, and reindex the category
    indices accordingly.
    ----------------
    Arguments:
    ----------------
      - ctgVal: Values of the latent variable for each category. (nCtg)
      - ctgInd: Category index for each stimulus. (nStim)
    ----------------
    Outputs:
    ----------------
      - ctgValSorted: Sorted values of the latent variable for each category. (nCtg)
      - ctgIndSorted: Sorted category index for each stimulus. (nStim)
    """
    # Rearrange the values of ctgVal and of ctgInd so that
    # ctgVal is in ascending order
    sortedValInds = torch.argsort(ctgVal)
    ctgValSorted = ctgVal[sortedValInds]
    # Update ctgInd to match the new ordering of ctgVal
    _, ctgIndNew = torch.sort(sortedValInds)
    ctgIndSorted = ctgIndNew[ctgInd]
    return ctgValSorted, ctgIndSorted

